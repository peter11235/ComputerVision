package edu.elon.example.myapp;

import com.codename1.capture.Capture;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Image;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.TextArea;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import com.codename1.ui.Toolbar;
import java.io.IOException;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
    private Container photoContainer;
    private BorderLayout bL;
    private Form hi;
    private Image plantImage;
    Classifier classifier;
    
    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);
        bL= new BorderLayout();
        bL.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE);
        hi = new Form("Welcome", bL);
        photoContainer = new Container(bL);
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        showWelcomeForm();
    }
    
    private void showWelcomeForm()
    {
    	Label welcome = new Label("Welcome to the Plant Classifier");
    	int directionsRows = 50;
        int directionsCols = 50;
        final String directionsString = "Take a picture of a flower on a BLACK background.";
        TextArea directions = new TextArea(directionsString, directionsRows, directionsCols);
        Button classifyButton = new Button("Classify this flower");
        classifyButton.addActionListener(classifyButtonListener);
        
        //hi.addComponent(BorderLayout.CENTER, photoContainer);
        //hi.add(BorderLayout.NORTH, directions);
        //hi.add(BorderLayout.SOUTH, classifyButton);
        
        hi.removeAllCommands();
        hi.setBackCommand(null);
        hi.addCommand(createPictureCommand(photoContainer));
        
        hi.show();
    }

    //This code creates a command that will take a photo and save it as the current 'plantImage'
    private Command createPictureCommand(final Container container)
    {
    	return new Command("Take a picture") {
    		public void actionPerformed(ActionEvent event)
    		{
    			//Picture up to 1024 pixels wide; -1 denotes keep aspect ratio
    			String photoPath = Capture.capturePhoto(1024, -1);
    			if (photoPath != null)
    			{
    				try {
						Image img = Image.createImage(photoPath);
						plantImage = img;
					} catch (IOException e) {
						System.out.println("From create picture command");
						e.printStackTrace();
					}
    			}
    		}
    	};
    }
    private ActionListener classifyButtonListener = new ActionListener()
    {
    	public void actionPerformed(ActionEvent event)
    	{
    		//classifier.classify(plantImage);
    	}
    };
    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }

}
